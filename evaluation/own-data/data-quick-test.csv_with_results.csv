Resource,Prompt,Rego intent,Difficulty,Reference output,Intent,LLM Output #0,LLM Plannable? #0,LLM Correct? #0,LLM Plan Phase Error #0,LLM OPA match phase Error #0,LLM Notes #0,LLM Output #1,LLM Plannable? #1,LLM Correct? #1,LLM Plan Phase Error #1,LLM OPA match phase Error #1,LLM Notes #1,LLM Output #2,LLM Plannable? #2,LLM Correct? #2,LLM Plan Phase Error #2,LLM OPA match phase Error #2,LLM Notes #2
aws_egress_only_internet_gateway,"creates an egress-only internet gateway associated with a specified VPC, allowing IPv6-enabled instances to connect to the internet without allowing inbound internet traffic","package terraform.validation

# Set default validation state for aws_egress_only_internet_gateway
default is_valid_egress_only_internet_gateway = false

# Validate aws_egress_only_internet_gateway resource
is_valid_egress_only_internet_gateway {
        some i
        resource := input.configuration.root_module.resources[i]
        resource.type == ""aws_egress_only_internet_gateway""
        resource.expressions.vpc_id.constant_value != null
        
}",1,"resource ""aws_egress_only_internet_gateway"" ""pike"" {
  vpc_id = ""vpc-0c33dc8cd64f408c4""
  tags = {
    pike = ""permissions""
  }
}","Has one ""aws_egress_only_internet_gateway"" resource:
Associated with a specified ""aws_vpc"" resource
Designed to allow IPv6-enabled instances within the VPC to connect to the internet while preventing inbound internet traffic
","I'll help you create a Terraform configuration for an egress-only internet gateway. Based on the examples and best practices, here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-west-2""  # Specify your desired AWS region
}

resource ""aws_egress_only_internet_gateway"" ""example"" {
  vpc_id = aws_vpc.main.id  # Reference to your VPC ID

  tags = {
    Name = ""example-egress-only-igw""
    Environment = ""production""
  }
}

# Reference VPC (you would typically have this defined or imported)
resource ""aws_vpc"" ""main"" {
  cidr_block                       = ""10.0.0.0/16""
  assign_generated_ipv6_cidr_block = true  # Enable IPv6 for the VPC
  
  tags = {
    Name = ""main""
  }
}
```

This configuration:
1. Includes the required AWS provider configuration
2. Creates an egress-only internet gateway associated with the specified VPC
3. Includes basic tagging for resource management
4. Includes a reference VPC resource with IPv6 enabled
5. The gateway will allow IPv6-enabled instances to access the internet while preventing inbound internet traffic

Note: You should either use an existing VPC ID or create a new VPC as shown in the example. The VPC must have IPv6 support enabled to use an egress-only internet gateway.",,,,,,"I'll help you create a Terraform configuration for an egress-only internet gateway. Based on the examples and requirements, here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-west-2""  # Specify your desired AWS region
}

resource ""aws_egress_only_internet_gateway"" ""example"" {
  vpc_id = aws_vpc.main.id  # Reference to your VPC ID

  tags = {
    Name        = ""egress-only-igw""
    Environment = ""production""
  }
}

# Example VPC resource (if you need to create a new VPC)
resource ""aws_vpc"" ""main"" {
  cidr_block                       = ""10.0.0.0/16""
  assign_generated_ipv6_cidr_block = true  # Enable IPv6 for the VPC

  tags = {
    Name = ""main-vpc""
  }
}
```

This configuration:
1. Includes the required AWS provider configuration
2. Creates an egress-only internet gateway resource
3. Associates it with a VPC (either existing or new)
4. Includes relevant tags for better resource management
5. Includes an example VPC resource with IPv6 enabled

Note: If you're using an existing VPC, you can replace `aws_vpc.main.id` with your actual VPC ID as a string, like `""vpc-xxxxxxxx""`.",,,,,,"Based on your question, I'll help you create a Terraform configuration for an egress-only internet gateway. Here's the code that will create the gateway and associate it with your VPC:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-west-2""  # Adjust the region as needed
}

resource ""aws_egress_only_internet_gateway"" ""example"" {
  vpc_id = aws_vpc.main.id  # Reference to your VPC ID

  tags = {
    Name = ""example-egress-only-igw""
    Environment = ""production""
  }
}

# Reference VPC (you should have this defined elsewhere or replace with your VPC ID)
resource ""aws_vpc"" ""main"" {
  cidr_block                       = ""10.0.0.0/16""
  assign_generated_ipv6_cidr_block = true  # Enable IPv6 for the VPC
  
  tags = {
    Name = ""main""
  }
}
```

This configuration:
1. Declares the required AWS provider
2. Creates an egress-only internet gateway resource
3. Associates it with your VPC using the VPC ID
4. Includes basic tags for better resource management
5. Includes a sample VPC resource with IPv6 enabled (you can remove this if you're using an existing VPC)

Remember to replace the VPC ID reference with your actual VPC ID if you're using an existing VPC, or adjust the CIDR block and other VPC settings as needed for your environment.",,,,,
"aws_route53_record, aws_route53_zone",Set up a record that maps a domain name to an IPv4 address using Route 53 resources,"package terraform.validation

default is_configuration_valid = false

default is_valid_r53_zone = false

default is_valid_r53_record = false

# Validate aws_route53_zone resource
is_valid_r53_zone {
        some i
        resource := input.configuration.root_module.resources[i]
    resource.type == ""aws_route53_zone""
    resource.expressions.name.constant_value == ""example53.com""
}

# Validate aws_route53_record
is_valid_r53_record {
        some i
    resource := input.configuration.root_module.resources[i]
    resource.type == ""aws_route53_record""
    resource.expressions.name
    resource.expressions.type.constant_value == ""A""
    resource.expressions.ttl
    resource.expressions.records
    resource.expressions.zone_id.references[0] == ""aws_route53_zone.example53.zone_id""
}


# Combine all checks into a final rule
is_configuration_valid {
    is_valid_r53_zone
    is_valid_r53_record
}
",2,"provider ""aws"" {
  region = ""us-east-1""
}

resource ""aws_route53_zone"" ""example53"" {
  name = ""example53.com""
}

resource ""aws_route53_record"" ""example53_A"" {
  zone_id = aws_route53_zone.example53.zone_id
  name    = ""example53.com""
  type    = ""A""
  ttl     = ""300""
  records = [""192.0.2.1""]  
}","Has one ""aws_route53_zone"" resource
    with ""name"" set to ""example53.com""

Has one ""aws_route53_record"" resource
    with ""name""
    with ""type"" set to ""A""
    with ""ttl""
    with ""records""
    with ""zone_id"" referencing the ""aws_route53_zone"" resource
","I'll help you create a Terraform configuration to set up a Route 53 record that maps a domain name to an IPv4 address. Based on the provided example, I'll generate a solution that follows AWS best practices.

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Create the Route 53 hosted zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Create an A record
resource ""aws_route53_record"" ""a_record"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""example.com""
  type    = ""A""
  ttl     = ""300""
  records = [""192.0.2.1""]
}
```

This configuration:
1. Sets up the required AWS provider
2. Creates a Route 53 hosted zone for the domain ""example.com""
3. Creates an A record that points to the IPv4 address ""192.0.2.1""
4. Sets a TTL (Time To Live) of 300 seconds

You can modify the domain name (`name` field) and IP address (`records` list) according to your specific needs. The TTL value can also be adjusted based on your requirements.",,,,,,"I'll help you create a Terraform configuration to set up a Route 53 record that maps a domain name to an IPv4 address. Based on the example provided, here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Create Route 53 zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Create A record
resource ""aws_route53_record"" ""a_record"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""example.com""
  type    = ""A""
  ttl     = ""300""
  records = [""192.0.2.1""]
}
```

This configuration:
1. Declares the required AWS provider
2. Creates a Route 53 hosted zone for the domain ""example.com""
3. Creates an A record that maps the domain to the IPv4 address ""192.0.2.1""
4. Sets a TTL (Time To Live) of 300 seconds

You can modify the domain name, TTL, and IP address according to your specific needs. The A record will allow DNS resolution of your domain name to the specified IPv4 address.",,,,,,"I'll help you create a Terraform configuration to set up a Route 53 record that maps a domain name to an IPv4 address. Based on the example provided, here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Create the Route 53 zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Create an A record
resource ""aws_route53_record"" ""a_record"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""example.com""
  type    = ""A""
  ttl     = ""300""
  records = [""192.0.2.1""]  # Replace with your actual IPv4 address
}
```

This configuration:
1. Sets up the required AWS provider
2. Creates a Route 53 hosted zone for your domain
3. Creates an A record that points your domain to the specified IPv4 address

Note: 
- Replace ""example.com"" with your actual domain name
- Replace the IP address (""192.0.2.1"") with your actual IPv4 address
- The TTL (Time To Live) is set to 300 seconds (5 minutes) but can be adjusted as needed",,,,,
"aws_network_acl, aws_vpc",configures AWS as the cloud provider. It defines an AWS VPC with a specific CIDR block of 10.0.0.0/16 and a network ACL linked to this VPC that allows specific TCP traffic for both ingress and egress rules.,"package terraform.validation

# Set default validation states
default is_valid_network_acl = false

# Validate aws_network_acl resources
is_valid_network_acl {
        some i
        network_acl := input.configuration.root_module.resources[i]
        network_acl.type == ""aws_network_acl""
        network_acl.name == ""example"" # Assuming the resource name is ""example""

        # Validate linked VPC
        network_acl.expressions.vpc_id.references[0] == ""aws_vpc.example.id""
        
        # Check ingress rules for allowing TCP traffic on port 80 from CIDR ""10.3.0.0/18""
        ingress := network_acl.expressions.ingress
        ingress.constant_value[0].protocol == ""tcp""
        ingress.constant_value[0].rule_no == 100
        ingress.constant_value[0].action == ""allow""
       

        # Check egress rules for allowing TCP traffic on port 443 to CIDR ""10.3.0.0/18""
        egress := network_acl.expressions.egress
        egress.constant_value[0].protocol == ""tcp""
        egress.constant_value[0].rule_no == 200
        egress.constant_value[0].action == ""allow""
}
",3,"terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.16""
    }
  }

  required_version = "">= 1.2.0""
}
# Define the provider block for AWS
provider ""aws"" {
  region = ""us-east-2"" # Set your desired AWS region
}

resource ""aws_vpc"" ""example"" {
  cidr_block = ""10.0.0.0/16""
}

resource ""aws_network_acl"" ""example"" {
  vpc_id = aws_vpc.example.id

  egress {
    protocol   = ""tcp""
    rule_no    = 200
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 443
    to_port    = 443
  }

  ingress {
    protocol   = ""tcp""
    rule_no    = 100
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 80
    to_port    = 80
  }
}","Has one ""aws_vpc"" resource:
with a specified ""cidr_block"" of ""10.0.0.0/16""

Has one ""aws_network_acl"" resource:
linked to the ""aws_vpc"" resource
with ingress rules allowing TCP traffic
with egress rules allowing TCP traffic","Based on the given examples and requirements, I'll help you create a Terraform configuration for AWS that sets up a VPC with a network ACL allowing specific TCP traffic. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.16""
    }
  }

  required_version = "">= 1.2.0""
}

provider ""aws"" {
  region = ""us-east-2""
}

resource ""aws_vpc"" ""example"" {
  cidr_block = ""10.0.0.0/16""
}

resource ""aws_network_acl"" ""example"" {
  vpc_id = aws_vpc.example.id

  egress {
    protocol   = ""tcp""
    rule_no    = 200
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 443
    to_port    = 443
  }

  ingress {
    protocol   = ""tcp""
    rule_no    = 100
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 80
    to_port    = 80
  }
}
```

This configuration:
1. Sets up the AWS provider with required version constraints
2. Creates a VPC with CIDR block 10.0.0.0/16
3. Creates a network ACL associated with the VPC that:
   - Allows inbound TCP traffic from 10.3.0.0/18 on port 80
   - Allows outbound TCP traffic to 10.3.0.0/18 on port 443
4. Uses proper rule numbers (100 for ingress, 200 for egress) and explicit allow actions

The configuration follows AWS best practices and includes all necessary components to create the requested infrastructure.",,,,,,"Based on the question and provided examples, I'll help you create a Terraform configuration for AWS that sets up a VPC with a network ACL allowing specific TCP traffic. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.16""
    }
  }

  required_version = "">= 1.2.0""
}

provider ""aws"" {
  region = ""us-east-2""
}

resource ""aws_vpc"" ""example"" {
  cidr_block = ""10.0.0.0/16""
}

resource ""aws_network_acl"" ""example"" {
  vpc_id = aws_vpc.example.id

  egress {
    protocol   = ""tcp""
    rule_no    = 200
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 443
    to_port    = 443
  }

  ingress {
    protocol   = ""tcp""
    rule_no    = 100
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 80
    to_port    = 80
  }

  tags = {
    Name = ""example-nacl""
  }
}
```

This configuration:
1. Sets up the AWS provider with required version constraints
2. Creates a VPC with CIDR block 10.0.0.0/16
3. Creates a network ACL associated with the VPC that:
   - Allows inbound TCP traffic on port 80 from 10.3.0.0/18
   - Allows outbound TCP traffic on port 443 to 10.3.0.0/18
4. Includes proper tagging for resource management

All resources are properly referenced and the configuration follows AWS best practices for network security.",,,,,,"Based on the examples provided and the current question, I'll help you create a Terraform configuration for AWS that sets up a VPC with a network ACL allowing specific TCP traffic. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.16""
    }
  }

  required_version = "">= 1.2.0""
}

provider ""aws"" {
  region = ""us-east-2""
}

resource ""aws_vpc"" ""example"" {
  cidr_block = ""10.0.0.0/16""
}

resource ""aws_network_acl"" ""example"" {
  vpc_id = aws_vpc.example.id

  egress {
    protocol   = ""tcp""
    rule_no    = 200
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 443
    to_port    = 443
  }

  ingress {
    protocol   = ""tcp""
    rule_no    = 100
    action     = ""allow""
    cidr_block = ""10.3.0.0/18""
    from_port  = 80
    to_port    = 80
  }
}
```

This configuration:
1. Sets up the AWS provider with required version constraints
2. Creates a VPC with CIDR block 10.0.0.0/16
3. Creates a network ACL associated with the VPC that:
   - Allows inbound TCP traffic on port 80 from 10.3.0.0/18
   - Allows outbound TCP traffic on port 443 to 10.3.0.0/18
4. Uses proper rule numbers and actions for both ingress and egress rules",,,,,
"aws_db_instance, aws_db_instance, aws_db_instance, aws_route53_record, aws_route53_record, aws_route53_zone","Using route 53 resources, configure a weighted routing policy that splits users between two db_instances that are replicas of a main db_instance. Call the zone ""main"", the original db_instance ""primary"", and the two replicas ""replica-1"" and ""replica-2"" respectively","package terraform.validation

default is_configuration_valid = false

default is_valid_r53_zone = false

default is_valid_r53_record_primary = false

default is_valid_r53_record_secondary = false

default is_valid_db_instance_main = false

default is_valid_db_instance_replica1 = false

default is_valid_db_instance_replica2 = false


# Validate aws_route53_zone resource
is_valid_r53_zone {
        some i
    resource := input.configuration.root_module.resources[i]
    resource.type == ""aws_route53_zone""
    resource.name == ""main""

}

# Validate aws_route53_record
is_valid_r53_record_primary {
        some i
    resource := input.configuration.root_module.resources[i]
    resource.type == ""aws_route53_record""
    resource.expressions.name
    resource.expressions.weighted_routing_policy[0].weight
    resource.expressions.type.constant_value == ""CNAME""
    resource.expressions.ttl
    resource.expressions.records.references[0] == ""aws_db_instance.replica_1.endpoint""
    resource.expressions.set_identifier
    resource.expressions.zone_id.references[0] == ""aws_route53_zone.main.zone_id""
}

is_valid_r53_record_secondary {
        some i
    resource := input.configuration.root_module.resources[i]
    resource.type == ""aws_route53_record""
    resource.expressions.name
    resource.expressions.weighted_routing_policy[0].weight
    resource.expressions.type.constant_value == ""CNAME""
    resource.expressions.ttl
    resource.expressions.records.references[0] == ""aws_db_instance.replica_2.endpoint""
    resource.expressions.set_identifier
    resource.expressions.zone_id.references[0] == ""aws_route53_zone.main.zone_id""
   }

# Rule to check if a valid aws_db_instance exists
is_valid_db_instance_main {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    has_required_main_db_arguments
}

is_valid_db_instance_replica1 {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    has_required_db_replica1_arguments
}

is_valid_db_instance_replica2 {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    has_required_db_replica2_arguments
}

# Helper rule to check if all required arguments are present and valid
has_required_main_db_arguments {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    # Check for allocated_storage, engine, instance_class, username, password, and skip_final_snapshot
    requirement1(resource.expressions)
    # Check for instance_class validity
    requirement2(resource.expressions)
}



# 1, allocated_storage and engine or snapshot_identifier or replace_source_db
requirement1(expressions) {
    expressions.allocated_storage
    expressions.engine
    expressions.username
    expressions.password
    is_valid_engine(expressions.engine.constant_value)
}

requirement1(expressions) {
    expressions.snapshot_identifier
}

# Check for instance_class validity
requirement2(expressions) {
    expressions.instance_class
    is_valid_instance_class(expressions.instance_class.constant_value)
}


# Helper rule to validate engine value
is_valid_engine(engine) {
        engine_set := {
        ""mysql"",
        ""postgres"",
        ""mariadb"",
        ""oracle-se"",
        ""oracle-se1"",
        ""oracle-se2"",
        ""oracle-ee"",
        ""sqlserver-ee"",
        ""sqlserver-se"",
        ""sqlserver-ex"",
        ""sqlserver-web""
    }
        engine_set[engine]
}

# Helper rule to validate instance class type
is_valid_instance_class(instance_class) {
        instance_class_starts_with(instance_class, ""db."")
}

# Helper rule to check prefix of instance class
instance_class_starts_with(instance_class, prefix) {
        startswith(instance_class, prefix)
}

has_required_db_replica1_arguments {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    resource.name == ""replica_1""
    resource.expressions.replicate_source_db.references[0] == ""aws_db_instance.primary.identifier""
    is_valid_instance_class(resource.expressions.instance_class.constant_value)
    resource.expressions.skip_final_snapshot
}

has_required_db_replica2_arguments {
    resource := input.configuration.root_module.resources[_]
    resource.type == ""aws_db_instance""
    resource.name == ""replica_2""
    resource.expressions.replicate_source_db.references[0] == ""aws_db_instance.primary.identifier""
    is_valid_instance_class(resource.expressions.instance_class.constant_value)
    resource.expressions.skip_final_snapshot
}


# Combine all checks into a final rule
is_configuration_valid {
    is_valid_r53_zone
    is_valid_r53_record_primary
    is_valid_r53_record_secondary
    is_valid_db_instance_main
    is_valid_db_instance_replica1
    is_valid_db_instance_replica2

}



",4,"terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 5.75""
    }
  }

  required_version = ""~> 1.9.8""
}

provider ""aws"" {
  region  = ""us-east-1""
  profile = ""admin-1""

  assume_role {
    role_arn = ""arn:aws:iam::590184057477:role/yicun-iac""
  }
}


resource ""aws_db_instance"" ""primary"" {
  identifier = ""primary""
  allocated_storage    = 20
  engine               = ""postgres""
  instance_class       = ""db.t3.micro""
  username             = ""dbadmin""
  password             = ""your_password_here""
  skip_final_snapshot  = true
  backup_retention_period  = 7
}

resource ""aws_db_instance"" ""replica_1"" {
  replicate_source_db  = aws_db_instance.primary.identifier
  instance_class       = ""db.t3.micro""
  identifier           = ""mydb-replica-1""
  skip_final_snapshot  = true
}

resource ""aws_db_instance"" ""replica_2"" {
  replicate_source_db  = aws_db_instance.primary.identifier
  instance_class       = ""db.t3.micro""
  identifier           = ""mydb-replica-2""
  skip_final_snapshot  = true
}


# Route53 Hosted Zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example53.com""
}


# Route53 Records for each RDS Read Replica with a Weighted Routing Policy
resource ""aws_route53_record"" ""replica_1_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica1.example53.com""
  type    = ""CNAME""
  records = [aws_db_instance.replica_1.endpoint]
  ttl     = ""60""
  weighted_routing_policy {
    weight = 10
  }
  set_identifier = ""replica-1-record""
}

resource ""aws_route53_record"" ""replica_2_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica2.example53.com""
  type    = ""CNAME""
  records = [aws_db_instance.replica_2.endpoint]
  ttl     = ""60""
  weighted_routing_policy {
    weight = 20
  }
  set_identifier = ""replica-2-record""
}","Has one ""aws_route53_zone"" resource
    with ""name""

Has a ""aws_db_instance"" resource
    with ""identifier"" set to ""primary""
    with ""instance_class""
    with ""allocated_storage""
    with ""engine""
    with ""username""
    with ""password""
    with ""backup_retention_period"" set to a non-zero number

Has multiple ""aws_db_instance"" resources
    with ""identifier""
    with ""replicate_source_db"" referencing the main ""aws_db_instance"" resource
    with ""instance_class""

Has multiple ""aws_route53_record"" resources
    with ""name""
    with ""type""
    with ""ttl""
    with ""zone_id"" referencing the ""aws_route53_zone"" resource
    with ""weighted_routing_policy"" block that contains ""weight"" as a non-zero number
    with ""records"" containing an endpoint of a corresponding replica of the main ""aws_db_instance""
","Based on the provided examples and the current question, I'll help you create a Terraform configuration for a weighted routing policy between two RDS replicas. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 5.75""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Primary DB Instance
resource ""aws_db_instance"" ""primary"" {
  identifier           = ""primary""
  allocated_storage    = 20
  engine              = ""postgres""
  instance_class      = ""db.t3.micro""
  username            = ""dbadmin""
  password            = ""your_password_here""
  skip_final_snapshot = true
  backup_retention_period = 7
}

# First Replica
resource ""aws_db_instance"" ""replica_1"" {
  identifier          = ""replica-1""
  instance_class      = ""db.t3.micro""
  replicate_source_db = aws_db_instance.primary.identifier
  skip_final_snapshot = true
}

# Second Replica
resource ""aws_db_instance"" ""replica_2"" {
  identifier          = ""replica-2""
  instance_class      = ""db.t3.micro""
  replicate_source_db = aws_db_instance.primary.identifier
  skip_final_snapshot = true
}

# Route53 Hosted Zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Route53 Record for Replica 1
resource ""aws_route53_record"" ""replica_1_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica1.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_1.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-1""
}

# Route53 Record for Replica 2
resource ""aws_route53_record"" ""replica_2_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica2.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_2.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-2""
}
```

This configuration:
1. Sets up a primary RDS instance
2. Creates two read replicas
3. Establishes a Route53 hosted zone
4. Creates two weighted CNAME records pointing to each replica
5. Splits traffic 50/50 between the replicas using weighted routing policy

The weighted routing policy is configured with equal weights (50) for both replicas, ensuring an even distribution of traffic between them. The `set_identifier` is required for weighted routing and uniquely identifies each record.",,,,,,"Based on the example provided, I'll help you create a Terraform configuration for a weighted routing policy between two RDS replicas. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 5.75""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Primary DB Instance
resource ""aws_db_instance"" ""primary"" {
  identifier           = ""primary""
  allocated_storage    = 20
  engine              = ""postgres""
  instance_class      = ""db.t3.micro""
  username            = ""dbadmin""
  password            = ""your_password_here""
  skip_final_snapshot = true
  backup_retention_period = 7
}

# First Replica
resource ""aws_db_instance"" ""replica_1"" {
  replicate_source_db = aws_db_instance.primary.identifier
  instance_class      = ""db.t3.micro""
  identifier          = ""replica-1""
  skip_final_snapshot = true
}

# Second Replica
resource ""aws_db_instance"" ""replica_2"" {
  replicate_source_db = aws_db_instance.primary.identifier
  instance_class      = ""db.t3.micro""
  identifier          = ""replica-2""
  skip_final_snapshot = true
}

# Route53 Hosted Zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Route53 Record for Replica 1
resource ""aws_route53_record"" ""replica_1_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica1.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_1.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-1-record""
}

# Route53 Record for Replica 2
resource ""aws_route53_record"" ""replica_2_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica2.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_2.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-2-record""
}
```

This configuration:
1. Sets up a primary RDS instance
2. Creates two read replicas
3. Establishes a Route53 hosted zone
4. Creates weighted routing records for both replicas with equal weight (50/50 split)
5. Uses CNAME records to point to the database endpoints
6. Includes proper set identifiers for the weighted routing policy

The weighted routing policy will distribute traffic evenly between the two replicas since they both have a weight of 50.",,,,,,"Based on the provided examples and the current question, I'll help you create a Terraform configuration for setting up Route 53 weighted routing between two RDS replicas. Here's the solution:

```hcl
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 5.75""
    }
  }
}

provider ""aws"" {
  region = ""us-east-1""
}

# Primary DB Instance
resource ""aws_db_instance"" ""primary"" {
  identifier           = ""primary""
  allocated_storage    = 20
  engine              = ""postgres""
  instance_class      = ""db.t3.micro""
  username            = ""dbadmin""
  password            = ""your_password_here""
  skip_final_snapshot = true
  backup_retention_period = 7
}

# First Replica
resource ""aws_db_instance"" ""replica_1"" {
  identifier          = ""replica-1""
  replicate_source_db = aws_db_instance.primary.identifier
  instance_class      = ""db.t3.micro""
  skip_final_snapshot = true
}

# Second Replica
resource ""aws_db_instance"" ""replica_2"" {
  identifier          = ""replica-2""
  replicate_source_db = aws_db_instance.primary.identifier
  instance_class      = ""db.t3.micro""
  skip_final_snapshot = true
}

# Route 53 Hosted Zone
resource ""aws_route53_zone"" ""main"" {
  name = ""example.com""
}

# Route 53 Record for Replica 1
resource ""aws_route53_record"" ""replica_1_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica1.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_1.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-1-record""
}

# Route 53 Record for Replica 2
resource ""aws_route53_record"" ""replica_2_cname"" {
  zone_id = aws_route53_zone.main.zone_id
  name    = ""replica2.example.com""
  type    = ""CNAME""
  ttl     = ""60""
  records = [aws_db_instance.replica_2.endpoint]
  
  weighted_routing_policy {
    weight = 50
  }
  set_identifier = ""replica-2-record""
}
```

This configuration:
1. Sets up a primary RDS instance
2. Creates two read replicas
3. Establishes a Route 53 hosted zone
4. Creates weighted routing records for both replicas with equal weights (50/50 split)
5. Uses CNAME records to point to the RDS endpoints
6. Includes all necessary attributes for each resource
7. Follows the naming conventions specified in the question

The weighted routing policy will distribute traffic equally between the two replicas since they have equal weights of 50.",,,,,
